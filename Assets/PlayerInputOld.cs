//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputOld.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputOld : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputOld()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputOld"",
    ""maps"": [
        {
            ""name"": ""GamecubeMap"",
            ""id"": ""178df2dd-e7a6-43f6-9a70-7870acd7f840"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2ab2210a-5e3e-4981-bbe3-02315a248a83"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R"",
                    ""type"": ""Button"",
                    ""id"": ""09d79097-89ae-4f71-8a5a-de91b37f373c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L"",
                    ""type"": ""Button"",
                    ""id"": ""af68c7fd-261c-41d5-a4d9-e3e3d3b91c8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""5b6cab35-473e-4a5a-ac6d-7d1078296225"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""be1b1fc9-3927-49a9-a507-4f964c72957d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd7eedf6-61de-41b8-ac56-5aecacedc391"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""807a420f-5ef9-45b2-be3d-808e5e4efa67"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37527803-f3ef-428f-b6cf-d9f58c430957"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1360bc0-2ff8-444a-9ef1-9c3856ee1fcc"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bff9b260-a8a5-4230-98ea-dc9167809710"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamecubeMap
        m_GamecubeMap = asset.FindActionMap("GamecubeMap", throwIfNotFound: true);
        m_GamecubeMap_Move = m_GamecubeMap.FindAction("Move", throwIfNotFound: true);
        m_GamecubeMap_R = m_GamecubeMap.FindAction("R", throwIfNotFound: true);
        m_GamecubeMap_L = m_GamecubeMap.FindAction("L", throwIfNotFound: true);
        m_GamecubeMap_X = m_GamecubeMap.FindAction("X", throwIfNotFound: true);
        m_GamecubeMap_A = m_GamecubeMap.FindAction("A", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamecubeMap
    private readonly InputActionMap m_GamecubeMap;
    private IGamecubeMapActions m_GamecubeMapActionsCallbackInterface;
    private readonly InputAction m_GamecubeMap_Move;
    private readonly InputAction m_GamecubeMap_R;
    private readonly InputAction m_GamecubeMap_L;
    private readonly InputAction m_GamecubeMap_X;
    private readonly InputAction m_GamecubeMap_A;
    public struct GamecubeMapActions
    {
        private @PlayerInputOld m_Wrapper;
        public GamecubeMapActions(@PlayerInputOld wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GamecubeMap_Move;
        public InputAction @R => m_Wrapper.m_GamecubeMap_R;
        public InputAction @L => m_Wrapper.m_GamecubeMap_L;
        public InputAction @X => m_Wrapper.m_GamecubeMap_X;
        public InputAction @A => m_Wrapper.m_GamecubeMap_A;
        public InputActionMap Get() { return m_Wrapper.m_GamecubeMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamecubeMapActions set) { return set.Get(); }
        public void SetCallbacks(IGamecubeMapActions instance)
        {
            if (m_Wrapper.m_GamecubeMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnMove;
                @R.started -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnR;
                @R.performed -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnR;
                @R.canceled -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnR;
                @L.started -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnL;
                @L.performed -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnL;
                @L.canceled -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnL;
                @X.started -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnX;
                @X.performed -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnX;
                @X.canceled -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnX;
                @A.started -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_GamecubeMapActionsCallbackInterface.OnA;
            }
            m_Wrapper.m_GamecubeMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @R.started += instance.OnR;
                @R.performed += instance.OnR;
                @R.canceled += instance.OnR;
                @L.started += instance.OnL;
                @L.performed += instance.OnL;
                @L.canceled += instance.OnL;
                @X.started += instance.OnX;
                @X.performed += instance.OnX;
                @X.canceled += instance.OnX;
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
            }
        }
    }
    public GamecubeMapActions @GamecubeMap => new GamecubeMapActions(this);
    public interface IGamecubeMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnR(InputAction.CallbackContext context);
        void OnL(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
    }
}
